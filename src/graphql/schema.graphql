# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AggregateLabel {
    count: Int
    max: LabelMaxAggregate
    min: LabelMinAggregate
}

type AggregateProject {
    count: Int
    max: ProjectMaxAggregate
    min: ProjectMinAggregate
}

type AggregateTask {
    count: Int
    max: TaskMaxAggregate
    min: TaskMinAggregate
}

type AggregateUser {
    count: Int
    max: UserMaxAggregate
    min: UserMinAggregate
}

type AggregateWorkspace {
    count: Int
    max: WorkspaceMaxAggregate
    min: WorkspaceMinAggregate
}

"Auth payload"
type Auth {
    token: String!
    user: User!
}

type BatchPayload {
    count: Int!
}

type Label {
    createdAt: DateTime
    id: String!
    name: String!
    tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]
}

type LabelMaxAggregate {
    createdAt: DateTime
    id: String
    name: String
}

type LabelMinAggregate {
    createdAt: DateTime
    id: String
    name: String
}

type Mutation {
    createLabel(data: LabelCreateInput!): Label!
    createProject(data: ProjectCreateInput!): Project!
    createTask(data: TaskCreateInput!): Task!
    createUser(data: UserCreateInput!): User!
    createWorkspace(data: WorkspaceCreateInput!): Workspace!
    deleteLabel(where: LabelWhereUniqueInput!): Label
    deleteManyLabel(where: LabelWhereInput): BatchPayload!
    deleteManyProject(where: ProjectWhereInput): BatchPayload!
    deleteManyTask(where: TaskWhereInput): BatchPayload!
    deleteManyUser(where: UserWhereInput): BatchPayload!
    deleteManyWorkspace(where: WorkspaceWhereInput): BatchPayload!
    deleteProject(where: ProjectWhereUniqueInput!): Project
    deleteTask(where: TaskWhereUniqueInput!): Task
    deleteUser(where: UserWhereUniqueInput!): User
    deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
    login(data: AuthInput!): Auth!
    signup(data: AuthInput!): Auth!
    updateLabel(data: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label
    updateManyLabel(data: LabelUpdateManyMutationInput!, where: LabelWhereInput): BatchPayload!
    updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
    updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
    updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
    updateManyWorkspace(data: WorkspaceUpdateManyMutationInput!, where: WorkspaceWhereInput): BatchPayload!
    updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
    updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
    upsertLabel(create: LabelCreateInput!, update: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label!
    upsertProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
    upsertTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
    upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
    upsertWorkspace(create: WorkspaceCreateInput!, update: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace!
}

type Project {
    assignUsers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]
    createdAt: DateTime
    deletedAt: DateTime
    id: String!
    name: String!
    projectOwner: User!
    updatedAt: DateTime
    userId: String!
}

type ProjectMaxAggregate {
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    name: String
    updatedAt: DateTime
    userId: String
}

type ProjectMinAggregate {
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    name: String
    updatedAt: DateTime
    userId: String
}

type Query {
    aggregateLabel(cursor: LabelWhereUniqueInput, orderBy: [LabelOrderByInput!], skip: Int, take: Int, where: LabelWhereInput): AggregateLabel!
    aggregateProject(cursor: ProjectWhereUniqueInput, orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): AggregateProject!
    aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
    aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
    aggregateWorkspace(cursor: WorkspaceWhereUniqueInput, orderBy: [WorkspaceOrderByInput!], skip: Int, take: Int, where: WorkspaceWhereInput): AggregateWorkspace!
    findFirstLabel(cursor: LabelWhereUniqueInput, distinct: [LabelScalarFieldEnum!], orderBy: [LabelOrderByInput!], skip: Int, take: Int, where: LabelWhereInput): Label
    findFirstProject(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): Project
    findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): Task
    findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
    findFirstWorkspace(cursor: WorkspaceWhereUniqueInput, distinct: [WorkspaceScalarFieldEnum!], orderBy: [WorkspaceOrderByInput!], skip: Int, take: Int, where: WorkspaceWhereInput): Workspace
    label(where: LabelWhereUniqueInput!): Label
    labels(cursor: LabelWhereUniqueInput, distinct: [LabelScalarFieldEnum!], orderBy: [LabelOrderByInput!], skip: Int, take: Int, where: LabelWhereInput): [Label!]!
    project(where: ProjectWhereUniqueInput!): Project
    projects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
    task(where: TaskWhereUniqueInput!): Task
    tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
    user(where: UserWhereUniqueInput!): User
    users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
    workspace(where: WorkspaceWhereUniqueInput!): Workspace
    workspaces(cursor: WorkspaceWhereUniqueInput, distinct: [WorkspaceScalarFieldEnum!], orderBy: [WorkspaceOrderByInput!], skip: Int, take: Int, where: WorkspaceWhereInput): [Workspace!]!
}

type Task {
    archiveAt: DateTime
    assignUser: User
    assignUserId: String
    content: String
    createdAt: DateTime
    deletedAt: DateTime
    id: String!
    labels(cursor: LabelWhereUniqueInput, distinct: [LabelScalarFieldEnum!], orderBy: [LabelOrderByInput!], skip: Int, take: Int, where: LabelWhereInput): [Label!]
    name: String
    updatedAt: DateTime
    user: User
    userId: String
}

type TaskMaxAggregate {
    archiveAt: DateTime
    assignUserId: String
    content: String
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    name: String
    updatedAt: DateTime
    userId: String
}

type TaskMinAggregate {
    archiveAt: DateTime
    assignUserId: String
    content: String
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    name: String
    updatedAt: DateTime
    userId: String
}

type User {
    assignTasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]
    createdAt: DateTime
    deletedAt: DateTime
    email: String!
    id: String!
    name: String
    password: String!
    projectOwns(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]
    projects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]
    role: Role
    tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]
    updatedAt: DateTime
    workspaces(cursor: WorkspaceWhereUniqueInput, distinct: [WorkspaceScalarFieldEnum!], orderBy: [WorkspaceOrderByInput!], skip: Int, take: Int, where: WorkspaceWhereInput): [Workspace!]
}

type UserMaxAggregate {
    createdAt: DateTime
    deletedAt: DateTime
    email: String
    id: String
    name: String
    password: String
    role: Role
    updatedAt: DateTime
}

type UserMinAggregate {
    createdAt: DateTime
    deletedAt: DateTime
    email: String
    id: String
    name: String
    password: String
    role: Role
    updatedAt: DateTime
}

type Workspace {
    createdAt: DateTime
    deletedAt: DateTime
    description: String
    id: String!
    image: String
    name: String!
    slug: String!
    updatedAt: DateTime
    user: User!
    userId: String!
}

type WorkspaceMaxAggregate {
    createdAt: DateTime
    deletedAt: DateTime
    description: String
    id: String
    image: String
    name: String
    slug: String
    updatedAt: DateTime
    userId: String
}

type WorkspaceMinAggregate {
    createdAt: DateTime
    deletedAt: DateTime
    description: String
    id: String
    image: String
    name: String
    slug: String
    updatedAt: DateTime
    userId: String
}

enum LabelScalarFieldEnum {
    createdAt
    id
    name
}

enum ProjectScalarFieldEnum {
    createdAt
    deletedAt
    id
    name
    updatedAt
    userId
}

enum QueryMode {
    default
    insensitive
}

enum Role {
    PROJECTOWNER
    USER
    WORKSPACEADMIN
    WORKSPACEOWNER
}

enum SortOrder {
    asc
    desc
}

enum TaskScalarFieldEnum {
    archiveAt
    assignUserId
    content
    createdAt
    deletedAt
    id
    name
    updatedAt
    userId
}

enum UserScalarFieldEnum {
    createdAt
    deletedAt
    email
    id
    name
    password
    role
    updatedAt
}

enum WorkspaceScalarFieldEnum {
    createdAt
    deletedAt
    description
    id
    image
    name
    slug
    updatedAt
    userId
}

"SignUp input data"
input AuthInput {
    email: String!
    name: String
    password: String!
}

input DateTimeNullableFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableFilter
    notIn: [DateTime!]
}

input EnumRoleNullableFilter {
    equals: Role
    in: [Role!]
    not: NestedEnumRoleNullableFilter
    notIn: [Role!]
}

input LabelCreateInput {
    createdAt: DateTime
    id: String
    name: String!
    tasks: TaskCreateManyWithoutLabelsInput
}

input LabelCreateManyWithoutTasksInput {
    connect: [LabelWhereUniqueInput!]
    connectOrCreate: [LabelCreateOrConnectWithouttasksInput!]
    create: [LabelCreateWithoutTasksInput!]
}

input LabelCreateOrConnectWithouttasksInput {
    create: LabelCreateWithoutTasksInput!
    where: LabelWhereUniqueInput!
}

input LabelCreateWithoutTasksInput {
    createdAt: DateTime
    id: String
    name: String!
}

input LabelListRelationFilter {
    every: LabelWhereInput
    none: LabelWhereInput
    some: LabelWhereInput
}

input LabelOrderByInput {
    createdAt: SortOrder
    id: SortOrder
    name: SortOrder
}

input LabelScalarWhereInput {
    AND: [LabelScalarWhereInput!]
    NOT: [LabelScalarWhereInput!]
    OR: [LabelScalarWhereInput!]
    createdAt: DateTimeNullableFilter
    id: StringFilter
    name: StringFilter
}

input LabelUpdateInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
    tasks: TaskUpdateManyWithoutLabelsInput
}

input LabelUpdateManyMutationInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
}

input LabelUpdateManyWithWhereWithoutTasksInput {
    data: LabelUpdateManyMutationInput!
    where: LabelScalarWhereInput!
}

input LabelUpdateManyWithoutTasksInput {
    connect: [LabelWhereUniqueInput!]
    connectOrCreate: [LabelCreateOrConnectWithouttasksInput!]
    create: [LabelCreateWithoutTasksInput!]
    delete: [LabelWhereUniqueInput!]
    deleteMany: [LabelScalarWhereInput!]
    disconnect: [LabelWhereUniqueInput!]
    set: [LabelWhereUniqueInput!]
    update: [LabelUpdateWithWhereUniqueWithoutTasksInput!]
    updateMany: [LabelUpdateManyWithWhereWithoutTasksInput!]
    upsert: [LabelUpsertWithWhereUniqueWithoutTasksInput!]
}

input LabelUpdateWithWhereUniqueWithoutTasksInput {
    data: LabelUpdateWithoutTasksInput!
    where: LabelWhereUniqueInput!
}

input LabelUpdateWithoutTasksInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
}

input LabelUpsertWithWhereUniqueWithoutTasksInput {
    create: LabelCreateWithoutTasksInput!
    update: LabelUpdateWithoutTasksInput!
    where: LabelWhereUniqueInput!
}

input LabelWhereInput {
    AND: [LabelWhereInput!]
    NOT: [LabelWhereInput!]
    OR: [LabelWhereInput!]
    createdAt: DateTimeNullableFilter
    id: StringFilter
    name: StringFilter
    tasks: TaskListRelationFilter
}

input LabelWhereUniqueInput {
    id: String
    name: String
}

input NestedDateTimeNullableFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableFilter
    notIn: [DateTime!]
}

input NestedEnumRoleNullableFilter {
    equals: Role
    in: [Role!]
    not: NestedEnumRoleNullableFilter
    notIn: [Role!]
}

input NestedStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringFilter
    notIn: [String!]
    startsWith: String
}

input NestedStringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringNullableFilter
    notIn: [String!]
    startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
    set: DateTime
}

input NullableEnumRoleFieldUpdateOperationsInput {
    set: Role
}

input NullableStringFieldUpdateOperationsInput {
    set: String
}

input ProjectCreateInput {
    assignUsers: UserCreateManyWithoutProjectsInput
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    name: String!
    projectOwner: UserCreateOneWithoutProjectOwnsInput!
    updatedAt: DateTime
}

input ProjectCreateManyWithoutAssignUsersInput {
    connect: [ProjectWhereUniqueInput!]
    connectOrCreate: [ProjectCreateOrConnectWithoutassignUsersInput!]
    create: [ProjectCreateWithoutAssignUsersInput!]
}

input ProjectCreateManyWithoutProjectOwnerInput {
    connect: [ProjectWhereUniqueInput!]
    connectOrCreate: [ProjectCreateOrConnectWithoutprojectOwnerInput!]
    create: [ProjectCreateWithoutProjectOwnerInput!]
}

input ProjectCreateOrConnectWithoutassignUsersInput {
    create: ProjectCreateWithoutAssignUsersInput!
    where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutprojectOwnerInput {
    create: ProjectCreateWithoutProjectOwnerInput!
    where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutAssignUsersInput {
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    name: String!
    projectOwner: UserCreateOneWithoutProjectOwnsInput!
    updatedAt: DateTime
}

input ProjectCreateWithoutProjectOwnerInput {
    assignUsers: UserCreateManyWithoutProjectsInput
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    name: String!
    updatedAt: DateTime
}

input ProjectListRelationFilter {
    every: ProjectWhereInput
    none: ProjectWhereInput
    some: ProjectWhereInput
}

input ProjectOrderByInput {
    createdAt: SortOrder
    deletedAt: SortOrder
    id: SortOrder
    name: SortOrder
    updatedAt: SortOrder
    userId: SortOrder
}

input ProjectScalarWhereInput {
    AND: [ProjectScalarWhereInput!]
    NOT: [ProjectScalarWhereInput!]
    OR: [ProjectScalarWhereInput!]
    createdAt: DateTimeNullableFilter
    deletedAt: DateTimeNullableFilter
    id: StringFilter
    name: StringFilter
    updatedAt: DateTimeNullableFilter
    userId: StringFilter
}

input ProjectUpdateInput {
    assignUsers: UserUpdateManyWithoutProjectsInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
    projectOwner: UserUpdateOneRequiredWithoutProjectOwnsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutAssignUsersInput {
    data: ProjectUpdateManyMutationInput!
    where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithWhereWithoutProjectOwnerInput {
    data: ProjectUpdateManyMutationInput!
    where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutAssignUsersInput {
    connect: [ProjectWhereUniqueInput!]
    connectOrCreate: [ProjectCreateOrConnectWithoutassignUsersInput!]
    create: [ProjectCreateWithoutAssignUsersInput!]
    delete: [ProjectWhereUniqueInput!]
    deleteMany: [ProjectScalarWhereInput!]
    disconnect: [ProjectWhereUniqueInput!]
    set: [ProjectWhereUniqueInput!]
    update: [ProjectUpdateWithWhereUniqueWithoutAssignUsersInput!]
    updateMany: [ProjectUpdateManyWithWhereWithoutAssignUsersInput!]
    upsert: [ProjectUpsertWithWhereUniqueWithoutAssignUsersInput!]
}

input ProjectUpdateManyWithoutProjectOwnerInput {
    connect: [ProjectWhereUniqueInput!]
    connectOrCreate: [ProjectCreateOrConnectWithoutprojectOwnerInput!]
    create: [ProjectCreateWithoutProjectOwnerInput!]
    delete: [ProjectWhereUniqueInput!]
    deleteMany: [ProjectScalarWhereInput!]
    disconnect: [ProjectWhereUniqueInput!]
    set: [ProjectWhereUniqueInput!]
    update: [ProjectUpdateWithWhereUniqueWithoutProjectOwnerInput!]
    updateMany: [ProjectUpdateManyWithWhereWithoutProjectOwnerInput!]
    upsert: [ProjectUpsertWithWhereUniqueWithoutProjectOwnerInput!]
}

input ProjectUpdateWithWhereUniqueWithoutAssignUsersInput {
    data: ProjectUpdateWithoutAssignUsersInput!
    where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutProjectOwnerInput {
    data: ProjectUpdateWithoutProjectOwnerInput!
    where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutAssignUsersInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
    projectOwner: UserUpdateOneRequiredWithoutProjectOwnsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutProjectOwnerInput {
    assignUsers: UserUpdateManyWithoutProjectsInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ProjectUpsertWithWhereUniqueWithoutAssignUsersInput {
    create: ProjectCreateWithoutAssignUsersInput!
    update: ProjectUpdateWithoutAssignUsersInput!
    where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutProjectOwnerInput {
    create: ProjectCreateWithoutProjectOwnerInput!
    update: ProjectUpdateWithoutProjectOwnerInput!
    where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
    AND: [ProjectWhereInput!]
    NOT: [ProjectWhereInput!]
    OR: [ProjectWhereInput!]
    assignUsers: UserListRelationFilter
    createdAt: DateTimeNullableFilter
    deletedAt: DateTimeNullableFilter
    id: StringFilter
    name: StringFilter
    projectOwner: UserRelationFilter
    updatedAt: DateTimeNullableFilter
    userId: StringFilter
}

input ProjectWhereUniqueInput {
    id: String
}

input StringFieldUpdateOperationsInput {
    set: String
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringFilter
    notIn: [String!]
    startsWith: String
}

input StringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringNullableFilter
    notIn: [String!]
    startsWith: String
}

input TaskCreateInput {
    archiveAt: DateTime
    assignUser: UserCreateOneWithoutAssignTasksInput
    content: String
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    labels: LabelCreateManyWithoutTasksInput
    name: String
    updatedAt: DateTime
    user: UserCreateOneWithoutTasksInput
}

input TaskCreateManyWithoutAssignUserInput {
    connect: [TaskWhereUniqueInput!]
    connectOrCreate: [TaskCreateOrConnectWithoutassignUserInput!]
    create: [TaskCreateWithoutAssignUserInput!]
}

input TaskCreateManyWithoutLabelsInput {
    connect: [TaskWhereUniqueInput!]
    connectOrCreate: [TaskCreateOrConnectWithoutlabelsInput!]
    create: [TaskCreateWithoutLabelsInput!]
}

input TaskCreateManyWithoutUserInput {
    connect: [TaskWhereUniqueInput!]
    connectOrCreate: [TaskCreateOrConnectWithoutuserInput!]
    create: [TaskCreateWithoutUserInput!]
}

input TaskCreateOrConnectWithoutassignUserInput {
    create: TaskCreateWithoutAssignUserInput!
    where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutlabelsInput {
    create: TaskCreateWithoutLabelsInput!
    where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutuserInput {
    create: TaskCreateWithoutUserInput!
    where: TaskWhereUniqueInput!
}

input TaskCreateWithoutAssignUserInput {
    archiveAt: DateTime
    content: String
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    labels: LabelCreateManyWithoutTasksInput
    name: String
    updatedAt: DateTime
    user: UserCreateOneWithoutTasksInput
}

input TaskCreateWithoutLabelsInput {
    archiveAt: DateTime
    assignUser: UserCreateOneWithoutAssignTasksInput
    content: String
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    name: String
    updatedAt: DateTime
    user: UserCreateOneWithoutTasksInput
}

input TaskCreateWithoutUserInput {
    archiveAt: DateTime
    assignUser: UserCreateOneWithoutAssignTasksInput
    content: String
    createdAt: DateTime
    deletedAt: DateTime
    id: String
    labels: LabelCreateManyWithoutTasksInput
    name: String
    updatedAt: DateTime
}

input TaskListRelationFilter {
    every: TaskWhereInput
    none: TaskWhereInput
    some: TaskWhereInput
}

input TaskOrderByInput {
    archiveAt: SortOrder
    assignUserId: SortOrder
    content: SortOrder
    createdAt: SortOrder
    deletedAt: SortOrder
    id: SortOrder
    name: SortOrder
    updatedAt: SortOrder
    userId: SortOrder
}

input TaskScalarWhereInput {
    AND: [TaskScalarWhereInput!]
    NOT: [TaskScalarWhereInput!]
    OR: [TaskScalarWhereInput!]
    archiveAt: DateTimeNullableFilter
    assignUserId: StringNullableFilter
    content: StringNullableFilter
    createdAt: DateTimeNullableFilter
    deletedAt: DateTimeNullableFilter
    id: StringFilter
    name: StringNullableFilter
    updatedAt: DateTimeNullableFilter
    userId: StringNullableFilter
}

input TaskUpdateInput {
    archiveAt: NullableDateTimeFieldUpdateOperationsInput
    assignUser: UserUpdateOneWithoutAssignTasksInput
    content: NullableStringFieldUpdateOperationsInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    labels: LabelUpdateManyWithoutTasksInput
    name: NullableStringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    user: UserUpdateOneWithoutTasksInput
}

input TaskUpdateManyMutationInput {
    archiveAt: NullableDateTimeFieldUpdateOperationsInput
    content: NullableStringFieldUpdateOperationsInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutAssignUserInput {
    data: TaskUpdateManyMutationInput!
    where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutLabelsInput {
    data: TaskUpdateManyMutationInput!
    where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutUserInput {
    data: TaskUpdateManyMutationInput!
    where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutAssignUserInput {
    connect: [TaskWhereUniqueInput!]
    connectOrCreate: [TaskCreateOrConnectWithoutassignUserInput!]
    create: [TaskCreateWithoutAssignUserInput!]
    delete: [TaskWhereUniqueInput!]
    deleteMany: [TaskScalarWhereInput!]
    disconnect: [TaskWhereUniqueInput!]
    set: [TaskWhereUniqueInput!]
    update: [TaskUpdateWithWhereUniqueWithoutAssignUserInput!]
    updateMany: [TaskUpdateManyWithWhereWithoutAssignUserInput!]
    upsert: [TaskUpsertWithWhereUniqueWithoutAssignUserInput!]
}

input TaskUpdateManyWithoutLabelsInput {
    connect: [TaskWhereUniqueInput!]
    connectOrCreate: [TaskCreateOrConnectWithoutlabelsInput!]
    create: [TaskCreateWithoutLabelsInput!]
    delete: [TaskWhereUniqueInput!]
    deleteMany: [TaskScalarWhereInput!]
    disconnect: [TaskWhereUniqueInput!]
    set: [TaskWhereUniqueInput!]
    update: [TaskUpdateWithWhereUniqueWithoutLabelsInput!]
    updateMany: [TaskUpdateManyWithWhereWithoutLabelsInput!]
    upsert: [TaskUpsertWithWhereUniqueWithoutLabelsInput!]
}

input TaskUpdateManyWithoutUserInput {
    connect: [TaskWhereUniqueInput!]
    connectOrCreate: [TaskCreateOrConnectWithoutuserInput!]
    create: [TaskCreateWithoutUserInput!]
    delete: [TaskWhereUniqueInput!]
    deleteMany: [TaskScalarWhereInput!]
    disconnect: [TaskWhereUniqueInput!]
    set: [TaskWhereUniqueInput!]
    update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [TaskUpdateManyWithWhereWithoutUserInput!]
    upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateWithWhereUniqueWithoutAssignUserInput {
    data: TaskUpdateWithoutAssignUserInput!
    where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutLabelsInput {
    data: TaskUpdateWithoutLabelsInput!
    where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
    data: TaskUpdateWithoutUserInput!
    where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutAssignUserInput {
    archiveAt: NullableDateTimeFieldUpdateOperationsInput
    content: NullableStringFieldUpdateOperationsInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    labels: LabelUpdateManyWithoutTasksInput
    name: NullableStringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    user: UserUpdateOneWithoutTasksInput
}

input TaskUpdateWithoutLabelsInput {
    archiveAt: NullableDateTimeFieldUpdateOperationsInput
    assignUser: UserUpdateOneWithoutAssignTasksInput
    content: NullableStringFieldUpdateOperationsInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    user: UserUpdateOneWithoutTasksInput
}

input TaskUpdateWithoutUserInput {
    archiveAt: NullableDateTimeFieldUpdateOperationsInput
    assignUser: UserUpdateOneWithoutAssignTasksInput
    content: NullableStringFieldUpdateOperationsInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    labels: LabelUpdateManyWithoutTasksInput
    name: NullableStringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutAssignUserInput {
    create: TaskCreateWithoutAssignUserInput!
    update: TaskUpdateWithoutAssignUserInput!
    where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutLabelsInput {
    create: TaskCreateWithoutLabelsInput!
    update: TaskUpdateWithoutLabelsInput!
    where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
    create: TaskCreateWithoutUserInput!
    update: TaskUpdateWithoutUserInput!
    where: TaskWhereUniqueInput!
}

input TaskWhereInput {
    AND: [TaskWhereInput!]
    NOT: [TaskWhereInput!]
    OR: [TaskWhereInput!]
    archiveAt: DateTimeNullableFilter
    assignUser: UserRelationFilter
    assignUserId: StringNullableFilter
    content: StringNullableFilter
    createdAt: DateTimeNullableFilter
    deletedAt: DateTimeNullableFilter
    id: StringFilter
    labels: LabelListRelationFilter
    name: StringNullableFilter
    updatedAt: DateTimeNullableFilter
    user: UserRelationFilter
    userId: StringNullableFilter
}

input TaskWhereUniqueInput {
    id: String
}

input UserCreateInput {
    assignTasks: TaskCreateManyWithoutAssignUserInput
    createdAt: DateTime
    deletedAt: DateTime
    email: String!
    id: String
    name: String
    password: String!
    projectOwns: ProjectCreateManyWithoutProjectOwnerInput
    projects: ProjectCreateManyWithoutAssignUsersInput
    role: Role
    tasks: TaskCreateManyWithoutUserInput
    updatedAt: DateTime
    workspaces: WorkspaceCreateManyWithoutUserInput
}

input UserCreateManyWithoutProjectsInput {
    connect: [UserWhereUniqueInput!]
    connectOrCreate: [UserCreateOrConnectWithoutprojectsInput!]
    create: [UserCreateWithoutProjectsInput!]
}

input UserCreateOneWithoutAssignTasksInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutassignTasksInput
    create: UserCreateWithoutAssignTasksInput
}

input UserCreateOneWithoutProjectOwnsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutprojectOwnsInput
    create: UserCreateWithoutProjectOwnsInput
}

input UserCreateOneWithoutTasksInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithouttasksInput
    create: UserCreateWithoutTasksInput
}

input UserCreateOneWithoutWorkspacesInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutworkspacesInput
    create: UserCreateWithoutWorkspacesInput
}

input UserCreateOrConnectWithoutassignTasksInput {
    create: UserCreateWithoutAssignTasksInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutprojectOwnsInput {
    create: UserCreateWithoutProjectOwnsInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutprojectsInput {
    create: UserCreateWithoutProjectsInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithouttasksInput {
    create: UserCreateWithoutTasksInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutworkspacesInput {
    create: UserCreateWithoutWorkspacesInput!
    where: UserWhereUniqueInput!
}

input UserCreateWithoutAssignTasksInput {
    createdAt: DateTime
    deletedAt: DateTime
    email: String!
    id: String
    name: String
    password: String!
    projectOwns: ProjectCreateManyWithoutProjectOwnerInput
    projects: ProjectCreateManyWithoutAssignUsersInput
    role: Role
    tasks: TaskCreateManyWithoutUserInput
    updatedAt: DateTime
    workspaces: WorkspaceCreateManyWithoutUserInput
}

input UserCreateWithoutProjectOwnsInput {
    assignTasks: TaskCreateManyWithoutAssignUserInput
    createdAt: DateTime
    deletedAt: DateTime
    email: String!
    id: String
    name: String
    password: String!
    projects: ProjectCreateManyWithoutAssignUsersInput
    role: Role
    tasks: TaskCreateManyWithoutUserInput
    updatedAt: DateTime
    workspaces: WorkspaceCreateManyWithoutUserInput
}

input UserCreateWithoutProjectsInput {
    assignTasks: TaskCreateManyWithoutAssignUserInput
    createdAt: DateTime
    deletedAt: DateTime
    email: String!
    id: String
    name: String
    password: String!
    projectOwns: ProjectCreateManyWithoutProjectOwnerInput
    role: Role
    tasks: TaskCreateManyWithoutUserInput
    updatedAt: DateTime
    workspaces: WorkspaceCreateManyWithoutUserInput
}

input UserCreateWithoutTasksInput {
    assignTasks: TaskCreateManyWithoutAssignUserInput
    createdAt: DateTime
    deletedAt: DateTime
    email: String!
    id: String
    name: String
    password: String!
    projectOwns: ProjectCreateManyWithoutProjectOwnerInput
    projects: ProjectCreateManyWithoutAssignUsersInput
    role: Role
    updatedAt: DateTime
    workspaces: WorkspaceCreateManyWithoutUserInput
}

input UserCreateWithoutWorkspacesInput {
    assignTasks: TaskCreateManyWithoutAssignUserInput
    createdAt: DateTime
    deletedAt: DateTime
    email: String!
    id: String
    name: String
    password: String!
    projectOwns: ProjectCreateManyWithoutProjectOwnerInput
    projects: ProjectCreateManyWithoutAssignUsersInput
    role: Role
    tasks: TaskCreateManyWithoutUserInput
    updatedAt: DateTime
}

input UserListRelationFilter {
    every: UserWhereInput
    none: UserWhereInput
    some: UserWhereInput
}

input UserOrderByInput {
    createdAt: SortOrder
    deletedAt: SortOrder
    email: SortOrder
    id: SortOrder
    name: SortOrder
    password: SortOrder
    role: SortOrder
    updatedAt: SortOrder
}

input UserRelationFilter {
    is: UserWhereInput
    isNot: UserWhereInput
}

input UserScalarWhereInput {
    AND: [UserScalarWhereInput!]
    NOT: [UserScalarWhereInput!]
    OR: [UserScalarWhereInput!]
    createdAt: DateTimeNullableFilter
    deletedAt: DateTimeNullableFilter
    email: StringFilter
    id: StringFilter
    name: StringNullableFilter
    password: StringFilter
    role: EnumRoleNullableFilter
    updatedAt: DateTimeNullableFilter
}

input UserUpdateInput {
    assignTasks: TaskUpdateManyWithoutAssignUserInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    email: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    password: StringFieldUpdateOperationsInput
    projectOwns: ProjectUpdateManyWithoutProjectOwnerInput
    projects: ProjectUpdateManyWithoutAssignUsersInput
    role: NullableEnumRoleFieldUpdateOperationsInput
    tasks: TaskUpdateManyWithoutUserInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    workspaces: WorkspaceUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    email: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    password: StringFieldUpdateOperationsInput
    role: NullableEnumRoleFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithWhereWithoutProjectsInput {
    data: UserUpdateManyMutationInput!
    where: UserScalarWhereInput!
}

input UserUpdateManyWithoutProjectsInput {
    connect: [UserWhereUniqueInput!]
    connectOrCreate: [UserCreateOrConnectWithoutprojectsInput!]
    create: [UserCreateWithoutProjectsInput!]
    delete: [UserWhereUniqueInput!]
    deleteMany: [UserScalarWhereInput!]
    disconnect: [UserWhereUniqueInput!]
    set: [UserWhereUniqueInput!]
    update: [UserUpdateWithWhereUniqueWithoutProjectsInput!]
    updateMany: [UserUpdateManyWithWhereWithoutProjectsInput!]
    upsert: [UserUpsertWithWhereUniqueWithoutProjectsInput!]
}

input UserUpdateOneRequiredWithoutProjectOwnsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutprojectOwnsInput
    create: UserCreateWithoutProjectOwnsInput
    update: UserUpdateWithoutProjectOwnsInput
    upsert: UserUpsertWithoutProjectOwnsInput
}

input UserUpdateOneRequiredWithoutWorkspacesInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutworkspacesInput
    create: UserCreateWithoutWorkspacesInput
    update: UserUpdateWithoutWorkspacesInput
    upsert: UserUpsertWithoutWorkspacesInput
}

input UserUpdateOneWithoutAssignTasksInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutassignTasksInput
    create: UserCreateWithoutAssignTasksInput
    delete: Boolean
    disconnect: Boolean
    update: UserUpdateWithoutAssignTasksInput
    upsert: UserUpsertWithoutAssignTasksInput
}

input UserUpdateOneWithoutTasksInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithouttasksInput
    create: UserCreateWithoutTasksInput
    delete: Boolean
    disconnect: Boolean
    update: UserUpdateWithoutTasksInput
    upsert: UserUpsertWithoutTasksInput
}

input UserUpdateWithWhereUniqueWithoutProjectsInput {
    data: UserUpdateWithoutProjectsInput!
    where: UserWhereUniqueInput!
}

input UserUpdateWithoutAssignTasksInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    email: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    password: StringFieldUpdateOperationsInput
    projectOwns: ProjectUpdateManyWithoutProjectOwnerInput
    projects: ProjectUpdateManyWithoutAssignUsersInput
    role: NullableEnumRoleFieldUpdateOperationsInput
    tasks: TaskUpdateManyWithoutUserInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    workspaces: WorkspaceUpdateManyWithoutUserInput
}

input UserUpdateWithoutProjectOwnsInput {
    assignTasks: TaskUpdateManyWithoutAssignUserInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    email: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    password: StringFieldUpdateOperationsInput
    projects: ProjectUpdateManyWithoutAssignUsersInput
    role: NullableEnumRoleFieldUpdateOperationsInput
    tasks: TaskUpdateManyWithoutUserInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    workspaces: WorkspaceUpdateManyWithoutUserInput
}

input UserUpdateWithoutProjectsInput {
    assignTasks: TaskUpdateManyWithoutAssignUserInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    email: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    password: StringFieldUpdateOperationsInput
    projectOwns: ProjectUpdateManyWithoutProjectOwnerInput
    role: NullableEnumRoleFieldUpdateOperationsInput
    tasks: TaskUpdateManyWithoutUserInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    workspaces: WorkspaceUpdateManyWithoutUserInput
}

input UserUpdateWithoutTasksInput {
    assignTasks: TaskUpdateManyWithoutAssignUserInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    email: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    password: StringFieldUpdateOperationsInput
    projectOwns: ProjectUpdateManyWithoutProjectOwnerInput
    projects: ProjectUpdateManyWithoutAssignUsersInput
    role: NullableEnumRoleFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    workspaces: WorkspaceUpdateManyWithoutUserInput
}

input UserUpdateWithoutWorkspacesInput {
    assignTasks: TaskUpdateManyWithoutAssignUserInput
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    email: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    password: StringFieldUpdateOperationsInput
    projectOwns: ProjectUpdateManyWithoutProjectOwnerInput
    projects: ProjectUpdateManyWithoutAssignUsersInput
    role: NullableEnumRoleFieldUpdateOperationsInput
    tasks: TaskUpdateManyWithoutUserInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpsertWithWhereUniqueWithoutProjectsInput {
    create: UserCreateWithoutProjectsInput!
    update: UserUpdateWithoutProjectsInput!
    where: UserWhereUniqueInput!
}

input UserUpsertWithoutAssignTasksInput {
    create: UserCreateWithoutAssignTasksInput!
    update: UserUpdateWithoutAssignTasksInput!
}

input UserUpsertWithoutProjectOwnsInput {
    create: UserCreateWithoutProjectOwnsInput!
    update: UserUpdateWithoutProjectOwnsInput!
}

input UserUpsertWithoutTasksInput {
    create: UserCreateWithoutTasksInput!
    update: UserUpdateWithoutTasksInput!
}

input UserUpsertWithoutWorkspacesInput {
    create: UserCreateWithoutWorkspacesInput!
    update: UserUpdateWithoutWorkspacesInput!
}

input UserWhereInput {
    AND: [UserWhereInput!]
    NOT: [UserWhereInput!]
    OR: [UserWhereInput!]
    assignTasks: TaskListRelationFilter
    createdAt: DateTimeNullableFilter
    deletedAt: DateTimeNullableFilter
    email: StringFilter
    id: StringFilter
    name: StringNullableFilter
    password: StringFilter
    projectOwns: ProjectListRelationFilter
    projects: ProjectListRelationFilter
    role: EnumRoleNullableFilter
    tasks: TaskListRelationFilter
    updatedAt: DateTimeNullableFilter
    workspaces: WorkspaceListRelationFilter
}

input UserWhereUniqueInput {
    email: String
    id: String
}

input WorkspaceCreateInput {
    createdAt: DateTime
    deletedAt: DateTime
    description: String
    id: String
    image: String
    name: String!
    slug: String!
    updatedAt: DateTime
    user: UserCreateOneWithoutWorkspacesInput!
}

input WorkspaceCreateManyWithoutUserInput {
    connect: [WorkspaceWhereUniqueInput!]
    connectOrCreate: [WorkspaceCreateOrConnectWithoutuserInput!]
    create: [WorkspaceCreateWithoutUserInput!]
}

input WorkspaceCreateOrConnectWithoutuserInput {
    create: WorkspaceCreateWithoutUserInput!
    where: WorkspaceWhereUniqueInput!
}

input WorkspaceCreateWithoutUserInput {
    createdAt: DateTime
    deletedAt: DateTime
    description: String
    id: String
    image: String
    name: String!
    slug: String!
    updatedAt: DateTime
}

input WorkspaceListRelationFilter {
    every: WorkspaceWhereInput
    none: WorkspaceWhereInput
    some: WorkspaceWhereInput
}

input WorkspaceOrderByInput {
    createdAt: SortOrder
    deletedAt: SortOrder
    description: SortOrder
    id: SortOrder
    image: SortOrder
    name: SortOrder
    slug: SortOrder
    updatedAt: SortOrder
    userId: SortOrder
}

input WorkspaceScalarWhereInput {
    AND: [WorkspaceScalarWhereInput!]
    NOT: [WorkspaceScalarWhereInput!]
    OR: [WorkspaceScalarWhereInput!]
    createdAt: DateTimeNullableFilter
    deletedAt: DateTimeNullableFilter
    description: StringNullableFilter
    id: StringFilter
    image: StringNullableFilter
    name: StringFilter
    slug: StringFilter
    updatedAt: DateTimeNullableFilter
    userId: StringFilter
}

input WorkspaceUpdateInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
    slug: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    user: UserUpdateOneRequiredWithoutWorkspacesInput
}

input WorkspaceUpdateManyMutationInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
    slug: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input WorkspaceUpdateManyWithWhereWithoutUserInput {
    data: WorkspaceUpdateManyMutationInput!
    where: WorkspaceScalarWhereInput!
}

input WorkspaceUpdateManyWithoutUserInput {
    connect: [WorkspaceWhereUniqueInput!]
    connectOrCreate: [WorkspaceCreateOrConnectWithoutuserInput!]
    create: [WorkspaceCreateWithoutUserInput!]
    delete: [WorkspaceWhereUniqueInput!]
    deleteMany: [WorkspaceScalarWhereInput!]
    disconnect: [WorkspaceWhereUniqueInput!]
    set: [WorkspaceWhereUniqueInput!]
    update: [WorkspaceUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [WorkspaceUpdateManyWithWhereWithoutUserInput!]
    upsert: [WorkspaceUpsertWithWhereUniqueWithoutUserInput!]
}

input WorkspaceUpdateWithWhereUniqueWithoutUserInput {
    data: WorkspaceUpdateWithoutUserInput!
    where: WorkspaceWhereUniqueInput!
}

input WorkspaceUpdateWithoutUserInput {
    createdAt: NullableDateTimeFieldUpdateOperationsInput
    deletedAt: NullableDateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: StringFieldUpdateOperationsInput
    slug: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input WorkspaceUpsertWithWhereUniqueWithoutUserInput {
    create: WorkspaceCreateWithoutUserInput!
    update: WorkspaceUpdateWithoutUserInput!
    where: WorkspaceWhereUniqueInput!
}

input WorkspaceWhereInput {
    AND: [WorkspaceWhereInput!]
    NOT: [WorkspaceWhereInput!]
    OR: [WorkspaceWhereInput!]
    createdAt: DateTimeNullableFilter
    deletedAt: DateTimeNullableFilter
    description: StringNullableFilter
    id: StringFilter
    image: StringNullableFilter
    name: StringFilter
    slug: StringFilter
    updatedAt: DateTimeNullableFilter
    user: UserRelationFilter
    userId: StringFilter
}

input WorkspaceWhereUniqueInput {
    id: String
    slug: String
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime